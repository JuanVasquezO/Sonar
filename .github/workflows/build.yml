# Workflow name
name: CI/CD Pipeline

on:
  # Manually trigger workflow runs
  workflow_dispatch:
  # Trigger the workflow on push from the main branch
  push:
    branches:
      - main

jobs:
  # Test's job
  tests:
    name: Unit tests with Coverage
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Job's steps
    steps:
      # Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
      # Set up Maven cache
      - name: Cache Maven packages
        # This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Run Tests and collect coverage
      - name: Run Tests with Coverage
        run: mvn -B test jacoco:report -Pcoverage

  # Sonar's Job
  sonar:
    # Depends on test's job
    needs: tests
    name: SonarCloud analysis
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Job's steps
    steps:
      # Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu' # Alternative distribution options are available.
      # Set up SonarCloud cache
      - name: Cache SonarCloud packages
        # This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # Analyze project with SonarCloud
      - name: Analyze with SonarCloud
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=JuanVasquezO_Sonar -Dsonar.organization=JuanVasquezO -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build's job
  build:
    # Depends on sonar's job
    needs: sonar
    name: Build
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
      # Set up Maven cache
      - name: Cache Maven packages
        # This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      # Upload the JAR file
      - name: Upload JAR
        # This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v3
        with:
          # Set artifact name
          name: artifact
          # From this path
          path: target/Sonar-0.0.1-SNAPSHOT.jar
